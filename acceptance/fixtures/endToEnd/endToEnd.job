job "endToEnd" do |j|
  j.description = "DESCRIPTION"
  j.node = "NODE"
  j.block_upstream = true
  j.block_downstream = false
  j.quiet_period = 42

  j.axes << slave(:arch, %w{i386 amd64})

  j.scm << git(url: "URL", branches: %w{master dev}, wipe_workspace: false)
  j.scm << store(script: "SCRIPT",
                 repository: "REPO",
                 version_regex: "REGEX",
                 parcel_builder_file: "FILENAME",
                 minimum_blessing: "BLESSING") do |pundles|
    pundles << package("PACKAGE") << bundle("BUNDLE")
  end

  j.triggers << pollscm("INTERVAL")
  j.triggers << pollurl(cron: "CRON", polling_node: "NODE") do |urls|
    urls << url("URL",
                proxy: false,
                timeout: 442,
                username: "USERNAME",
                password: "PASSWORD",
                check_status: 202,
                check_etag: false,
                check_date: true) do |content|
      content << simple
      content << json("JSON_PATH1", "JSON_PATH2")
      content << xml("XPATH1", "XPATH2")
      content << text("REGEX1", "REGEX2")
    end
  end

  j.wrappers << timeout(type: 'elastic', elastic_percentage: 150, elastic_default_timeout: 5, fail: true)
  j.wrappers << timestamps

  j.builders << shell("COMMAND")

  j.publishers << archive(artifacts: "ARTIFACTS", latest_only: true, allow_empty: true)
  j.publishers << cppcheck(pattern: "PATTERN")
  j.publishers << email_ext(recipients: %w{fred barney})
  j.publishers << ircbot(notify_start: true)
  j.publishers << junit(results: "RESULTS", keep_long_stdio: false)
  j.publishers << trigger(project: "PROJECT")
  j.publishers << xunit do |types|
    types << unittest(pattern: "PATTERN", deleteoutput: false)
  end
end
